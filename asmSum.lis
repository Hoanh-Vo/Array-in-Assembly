     1                                  ;Author: Hoanh Vo
     2                                  ;Author email: hvo123@csu.fullerton.edu
     3                                  ;Assigment 4
     4                                  ;Program name: Summation of Array
     5                                  
     6                                  ;Purpose: This program calculates the total of the array's elements; the array is received from control module.
     7                                  ;language: x86-64 assembly
     8                                  
     9                                  
    10                                  
    11                                  ;===== Begin code area ==============================================================================================================
    12                                  
    13                                  extern printf
    14                                  extern introduction
    15                                  
    16                                  global summation
    17                                  
    18                                  segment .data
    19                                  
    20 00000000 46756E74696F6E2073-     	welcome db "Funtion summation in Sum module, written in Assembly, has begun execution. --- starting calculating the Sum.", 10,0
    20 00000009 756D6D6174696F6E20-
    20 00000012 696E2053756D206D6F-
    20 0000001B 64756C652C20777269-
    20 00000024 7474656E20696E2041-
    20 0000002D 7373656D626C792C20-
    20 00000036 68617320626567756E-
    20 0000003F 20657865637574696F-
    20 00000048 6E2E202D2D2D207374-
    20 00000051 617274696E67206361-
    20 0000005A 6C63756C6174696E67-
    20 00000063 207468652053756D2E-
    20 0000006C 0A00               
    21                                  	
    22 0000006E 257300                  	stringformat db "%s",0
    23                                  
    24                                  	
    25                                  segment .bss  ; Reserved for uninitialized arrays
    26                                  	;Empty
    27                                  segment .text
    28                                  
    29                                  summation:
    30                                  
    31                                  ;===== Backup all the GPRs ========================================================================================================
    32 00000000 55                      push rbp                                                    ;Backup the base pointer
    33 00000001 4889E5                  mov  rbp,rsp                                                ;Advance the base pointer to start of the current 
    34 00000004 57                      push rdi                                                    ;Backup rdi
    35 00000005 56                      push rsi                                                    ;Backup rsi
    36 00000006 52                      push rdx                                                    ;Backup rdx
    37 00000007 51                      push rcx                                                    ;Backup rcx
    38 00000008 4150                    push r8                                                     ;Backup r8
    39 0000000A 4151                    push r9                                                     ;Backup r9
    40 0000000C 4152                    push r10                                                    ;Backup r10
    41 0000000E 4153                    push r11                                                    ;Backup r11: printf often changes r11
    42 00000010 4154                    push r12                                                    ;Backup r12
    43 00000012 4155                    push r13                                                    ;Backup r13
    44 00000014 4156                    push r14                                                    ;Backup r14
    45 00000016 4157                    push r15                                                    ;Backup r15
    46 00000018 53                      push rbx                                                    ;Backup rbx
    47 00000019 9C                      pushf                                                       ;Backup rflags
    48                                  ;Registers rax, rip, and rsp are usually not backed up.
    49                                  
    50                                  
    51                                  ;=====  Array's address and size was passed from Control module to  ====================================================================================================
    52                                  	
    53                                  	
    54                                  
    55                                  	
    56 0000001A 4989F4                  		mov r12,rsi	;r12 hold the size of of the array
    57 0000001D 4989FD                  		mov r13,rdi     ;r13 hold the address of the array
    58                                  
    59                                  ;===== Output initial messages ====================================================================================================
    60                                  	
    61 00000020 B800000000              	mov rax, 0
    62 00000025 48BF-                   	mov rdi, welcome
    62 00000027 [0000000000000000] 
    63 0000002F E8(00000000)            	call printf
    64                                  
    65                                  ;===== Loop to get the sum of the all array's members ====================================================================================================
    66                                  	
    67 00000034 41BF00000000            	mov r15,0	; r15 is the counter
    68                                  ;	mov r14,0	; r14 is the sum, set r14 == 0			why not 0?????????????????/
    69 0000003A 41BB00000000            	mov r11,0
    70                                  	
    71                                  loop:
    72 00000040 4D39E7                  	cmp r15,r12
    73 00000043 7D0A                    	jge next				;exit the loop when counter >= array's
    74                                  ;	add r14,[r13+ (8*r15)]		;[rdi+8*r15] == [rdi +8*0]
    75 00000045 4F035CFD00              	add r11,[r13 +(8*r15)]
    76 0000004A 49FFC7                  	inc r15				; increase r15 by 1
    77 0000004D EBF1                    	jmp loop			;repeat the loop 
    78                                  
    79                                  next:
    80                                  
    81                                  ;=====  Return the sum back to the caller ====================================================================================================
    82                                  	
    83                                  
    84                                  	
    85 0000004F 4C89D8                  	mov rax, r11
    86                                  
    87                                  
    88                                  
    89                                  ;===== Restore original values to integer registers ===============================================================================
    90 00000052 9D                      popf                                                        ;Restore rflags
    91 00000053 5B                      pop rbx                                                     ;Restore rbx
    92 00000054 415F                    pop r15                                                     ;Restore r15
    93 00000056 415E                    pop r14                                                     ;Restore r14
    94 00000058 415D                    pop r13                                                     ;Restore r13
    95 0000005A 415C                    pop r12                                                     ;Restore r12
    96 0000005C 415B                    pop r11                                                     ;Restore r11
    97 0000005E 415A                    pop r10                                                     ;Restore r10
    98 00000060 4159                    pop r9                                                      ;Restore r9
    99 00000062 4158                    pop r8                                                      ;Restore r8
   100 00000064 59                      pop rcx                                                     ;Restore rcx
   101 00000065 5A                      pop rdx                                                     ;Restore rdx
   102 00000066 5E                      pop rsi                                                     ;Restore rsi
   103 00000067 5F                      pop rdi                                                     ;Restore rdi
   104 00000068 5D                      pop rbp                                                     ;Restore rbp
   105                                  
   106 00000069 C3                      ret
   107                                  
   108                                  
